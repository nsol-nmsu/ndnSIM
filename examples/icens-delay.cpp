#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/ndnSIM-module.h"


#include <iostream>
#include <fstream>

namespace ns3 {

/**
 * This scenario simulates network graph generated by TopoMux (NMSU NSOL):
 *
 *     NS_LOG=ndn.Subscriber::ndn.SpontaneousProducer ./waf --run ndn-icens-simulation
 */

int
main(int argc, char* argv[])
{

  //--- Count the number of nodes to create
  ifstream nfile ("src/ndnSIM/examples/a-nodes.txt", std::ios::in);
  std::string line;
  int nodecount = 0;

  if (nfile.is_open ()) {
  	//while (ifile >> nodeid >> nodename >> nodetype) {
	while(std::getline(nfile,line)){
		nodecount += 1;
  	}
  }
  else {
	std::cout << "Error::Cannot open nodes file!!!" << std::endl;
  }
  nfile.close();

  // setting default parameters for PointToPoint links and channels
  Config::SetDefault("ns3::PointToPointNetDevice::DataRate", StringValue("1Mbps"));
  Config::SetDefault("ns3::PointToPointChannel::Delay", StringValue("10ms"));
  Config::SetDefault("ns3::DropTailQueue::MaxPackets", StringValue("20"));

  // Read optional command-line parameters (e.g., enable visualizer with ./waf --run=<> --visualize
  CommandLine cmd;
  cmd.Parse(argc, argv);

  // Creating the number of nodes counted in the nodes file
  NodeContainer nodes;
  nodes.Create(nodecount);

  // Connecting nodes using two links
  PointToPointHelper p2p;

  //--- Get the edges of the graph from file and connect them
  ifstream efile ("src/ndnSIM/examples/a-edges.txt", std::ios::in);
  std::string srcnode, dstnode, bw, delay, edgetype;

  if (efile.is_open ()) {
        while (efile >> srcnode >> dstnode >> bw >> delay >> edgetype) {
		p2p.Install(nodes.Get(std::stoi(srcnode)), nodes.Get(std::stoi(dstnode)));
        }
  }
  else {
        std::cout << "Error::Cannot open edges file!!!" << std::endl;
  }
  efile.close();

  // Install NDN stack on all nodes
  ndn::StackHelper ndnHelper;
  ndnHelper.InstallAll();

  // Choosing forwarding strategy
  ndn::StrategyChoiceHelper::InstallAll("/prefix", "/localhost/nfd/strategy/multicast");


  // Installing global routing interface on all nodes
  ndn::GlobalRoutingHelper ndnGlobalRoutingHelper;
  ndnGlobalRoutingHelper.InstallAll();

  //--- Configure manual/static routes on all nodes
  //--- Install spontaneous producer application for each prefix that a node serves
  ifstream rfile("src/ndnSIM/examples/a-routing.txt", std::ios::in);
  Ptr<Node> currentnode, nexthopnode;
  std::string strfrom, prefixtoroute, strnexthop, strmetric;
  int metric;

  if (rfile.is_open ()) {
	// Spontaneous producer helper
	ndn::AppHelper spHelper("ns3::ndn::SpontaneousProducer");

        while (rfile >> strfrom >> prefixtoroute >> strnexthop >> strmetric) {

		if (strnexthop == "local") {
			 // Install spontaneous producer on the node for the prefix being served
			 spHelper.SetPrefix(prefixtoroute);
  			 spHelper.SetAttribute("Frequency", StringValue("1")); //how many seconds to wait before sending data for subscription interest
  			 spHelper.SetAttribute("PayloadSize", StringValue("1024"));
  			 spHelper.Install(nodes.Get(std::stoi(strfrom)));
		}
		else {
			// Configure static route on node
			currentnode = nodes.Get(std::stoi(strfrom)); // node to add route on
			prefixtoroute = prefixtoroute; // prefix to add route for
			nexthopnode = nodes.Get(std::stoi(strnexthop));     // next hop node
			metric = std::stoi(strmetric);     // metric or cost
			ndn::FibHelper::AddRoute(currentnode, prefixtoroute, nexthopnode, metric);
		}
        }
  }
  else {
        std::cout << "Error::Cannot open routing table file!!!" << std::endl;
  }
  rfile.close();


  // Installing applications
/*
  // Aggregator
  ndn::AppHelper aggHelper("ns3::ndn::Aggregator");
  aggHelper.SetPrefix("/icens/agg0"); //prefix beng served by node
  aggHelper.SetAttribute("UpstreamPrefix", StringValue("/icens/com0")); //prefix to which aggregated payload interest is forwarded
  aggHelper.SetAttribute("Frequency",  StringValue("0.5")); //how often to perform payload aggregation
  aggHelper.SetAttribute("PayloadSize", StringValue("0"));
  aggHelper.Install(nodes.Get(1));
*/

  // Subscriber
  ndn::AppHelper consumerHelper("ns3::ndn::Subscriber");

  // Subscriber send out subscription interest for a prefix...
  consumerHelper.SetPrefix("/overlay/com");
  consumerHelper.SetAttribute("TxTimer",  StringValue("3")); //resend subscription interest every 5 seconds
  consumerHelper.SetAttribute("Subscription", IntegerValue(1)); //set the subscription value
  consumerHelper.Install(nodes.Get(5));

  consumerHelper.SetPrefix("/direct/agg");
  consumerHelper.SetAttribute("TxTimer", StringValue("1")); //resend subscription interest every 5 seconds
  consumerHelper.SetAttribute("Subscription", IntegerValue(2)); //set the subscription value
  consumerHelper.Install(nodes.Get(7));


  Simulator::Stop(Seconds(3.0));

  //ndn::AppDelayTracer::InstallAll("icens-delay-trace.txt");

  Simulator::Run();
  Simulator::Destroy();

  return 0;
}

} // namespace ns3

int
main(int argc, char* argv[])
{
  return ns3::main(argc, argv);
}
